# -*- coding: utf-8 -*-
"""Mobile Price Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xlt98xRuWt1rYyZSERvdY8ytLrwO40vw

Importing Algorithms
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import seaborn as sns

"""importing DataSet"""

df=pd.read_csv("/content/Cellphone.csv")

df.head()

df.tail()

df.info()

df.isnull()

df.describe()

df.corr()

sns.heatmap(df.corr(),annot = True, cmap="Blues")

df = df.drop("thickness",axis=1)

df = df.drop("Product_id",axis=1)

df.corr()

sns.heatmap(df.corr(),annot = True, cmap="Greens")

x = df.iloc[:,1:]

x

y = df.iloc[:,:1]

y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size = 0.25, random_state = 42)

"""RandomForestRegresso Model"""

rfr=RandomForestRegressor()

rfr.fit(x_train,y_train)

from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

y_pred=rfr.predict(x_test)

mse= mean_squared_error(y_test,y_pred)
mae= mean_absolute_error(y_test,y_pred)
r2= r2_score(y_test,y_pred)

r2

x_train_predict=rfr.predict(x_train)

y_pred=rfr.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

"""DecisionTreeRegressor Model"""

dtr = DecisionTreeRegressor()

dtr.fit(x_train,y_train)

from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

mse= mean_squared_error(y_test,y_pred)
mae= mean_absolute_error(y_test,y_pred)
r2= r2_score(y_test,y_pred)

r2

x_train_predict=dtr.predict(x_train)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

training_data_accuracy=accuracy_score(x_train_predict,y_train)

"""Accuracy of Training Data"""

training_data_accuracy

x_test_predict=dtr.predict(x_test)

cf = confusion_matrix(y_test,x_test_predict)
cf

"""Model Preparation

"""

input_data = (8809,150.0,5.50,401,8,2.200,64.0,4.000,20.00,20.0,3000)
input_data_array = np.asarray(input_data)
input_data_reshape = input_data_array.reshape(1,-1)
predict = dtr.predict(input_data_reshape)
predict

